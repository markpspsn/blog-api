from fastapi import FastAPI, Request, Form, HTTPException
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from models import storage
from routers import users, posts
import uvicorn

# –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Blog API",
    description="REST API –¥–ª—è –±–ª–æ–≥–∞",
    version="1.0.0"
)

# —Ä–∞–±–æ—Ç–∞ —Å HTML —à–∞–±–ª–æ–Ω–∞–º–∏
templates = Jinja2Templates(directory="templates")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ—Å—Ç–æ–≤
app.include_router(users.router)
app.include_router(posts.router)

def create_test_user():
    # –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    users = storage.get_all_users()
    if not users:
        user = storage.create_user("test@mail.ru", "testuser", "123456")
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {user.id}")
        return user.id
    else:
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –µ—Å—Ç—å. ID –ø–µ—Ä–≤–æ–≥–æ: {users[0].id}")
        return users[0].id

# –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.on_event("startup")
async def startup_event():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤
    storage.load_users_from_file()
    storage.load_posts_from_file()
    user_id = create_test_user()
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–æ–≤")
    print(f"üéØ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}")
    print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:8000")
    print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: http://localhost:8000/docs")

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ—Å—Ç–æ–≤
@app.get("/", response_class=HTMLResponse)
async def home_page(request: Request):
    all_posts = storage.get_all_posts()
    return templates.TemplateResponse("index.html", {
        "request": request, 
        "posts": all_posts
    })

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.get("/users/create", response_class=HTMLResponse)
async def create_user_page(request: Request):
    return templates.TemplateResponse("create_user.html", {"request": request})

# —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.post("/users/create", response_class=HTMLResponse)
async def create_user_handler(
    request: Request,
    email: str = Form(...),
    login: str = Form(...),
    password: str = Form(...)
):
    try:
        print(f"üîß –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {email}, {login}")
        user = storage.create_user(email, login, password)
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ID {user.id}")
        
        all_posts = storage.get_all_posts()
        return templates.TemplateResponse("index.html", {
            "request": request, 
            "posts": all_posts,
            "message": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{login}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! ID: {user.id}"
        })
    except Exception as error:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(error)}"
        print(f"‚ùå {error_msg}")
        return templates.TemplateResponse("create_user.html", {
            "request": request,
            "error": error_msg
        })

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
@app.get("/posts/create", response_class=HTMLResponse)
async def create_post_page(request: Request):
    # —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ—Ä–∞
    users = storage.get_all_users()
    return templates.TemplateResponse("create_post.html", {
        "request": request,
        "users": users
    })

# —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
@app.post("/posts/create", response_class=HTMLResponse)
async def create_post_handler(
    request: Request,
    authorId: int = Form(...),
    title: str = Form(...),
    content: str = Form(...)
):
    try:
        print(f"üîß –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: authorId={authorId}, title='{title}'")

        author = storage.get_user_by_id(authorId)
        if not author:
            error_msg = f"–ê–≤—Ç–æ—Ä —Å ID {authorId} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            print(f"‚ùå {error_msg}")
            users = storage.get_all_users()
            return templates.TemplateResponse("create_post.html", {
                "request": request,
                "users": users,
                "error": error_msg
            })
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
        post = storage.create_post(authorId, title, content)
        print(f"‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω: ID {post.id}")
        
        all_posts = storage.get_all_posts()
        return templates.TemplateResponse("index.html", {
            "request": request, 
            "posts": all_posts,
            "message": f"–ü–æ—Å—Ç '{title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"
        })
    except Exception as error:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: {str(error)}"
        print(f"‚ùå {error_msg}")
        users = storage.get_all_users()
        return templates.TemplateResponse("create_post.html", {
            "request": request,
            "users": users,
            "error": error_msg
        })

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–∞
@app.get("/posts/{post_id}", response_class=HTMLResponse)
async def view_post_page(request: Request, post_id: int):
    post = storage.get_post_by_id(post_id)
    if not post:
        raise HTTPException(status_code=404, detail="–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return templates.TemplateResponse("post.html", {
        "request": request, 
        "post": post
    })

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞
@app.get("/posts/{post_id}/edit", response_class=HTMLResponse)
async def edit_post_page(request: Request, post_id: int):
    post = storage.get_post_by_id(post_id)
    if not post:
        raise HTTPException(status_code=404, detail="–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return templates.TemplateResponse("edit_post.html", {
        "request": request, 
        "post": post
    })

#—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
@app.post("/posts/{post_id}/edit", response_class=HTMLResponse)
async def edit_post_handler(
    request: Request,
    post_id: int,
    title: str = Form(...),
    content: str = Form(...)
):
    post = storage.update_post(post_id, title, content)
    if not post:
        raise HTTPException(status_code=404, detail="–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    all_posts = storage.get_all_posts()
    return templates.TemplateResponse("index.html", {
        "request": request, 
        "posts": all_posts,
        "message": "–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!"
    })

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
@app.post("/posts/{post_id}/delete")
async def delete_post_handler(post_id: int):
    success = storage.delete_post(post_id)
    if not success:
        raise HTTPException(status_code=404, detail="–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    return RedirectResponse(url="/", status_code=303)

# –õ–∞–π–∫ –ø–æ—Å—Ç–∞
@app.post("/posts/{post_id}/like")
async def like_post_handler(post_id: int):
    success = storage.like_post(post_id)
    if not success:
        raise HTTPException(status_code=404, detail="–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return RedirectResponse(url=f"/posts/{post_id}", status_code=303)

# –î–∏–∑–ª–∞–π–∫ –ø–æ—Å—Ç–∞
@app.post("/posts/{post_id}/dislike")
async def dislike_post_handler(post_id: int):
    success = storage.dislike_post(post_id)
    if not success:
        raise HTTPException(status_code=404, detail="–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return RedirectResponse(url=f"/posts/{post_id}", status_code=303)

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)